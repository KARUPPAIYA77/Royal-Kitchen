/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2025-03-07 06:49:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <link rel=\"icon\" href=\"admin/styles/images/favicon.png\" type=\"image/png\">\r\n");
      out.write("    <title>RoyalKitchen</title>\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <!-- Font Links -->\r\n");
      out.write("    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Merienda:wght@300..900&family=Stylish&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"admin/styles/animation.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            height: 100vh;\r\n");
      out.write("            background: linear-gradient(135deg, \r\n");
      out.write("                #3b0a0a, /* Very Dark Red */\r\n");
      out.write("                #6d0f0f, /* Dark Red */\r\n");
      out.write("                #8c1d1d, /* Deep Red */\r\n");
      out.write("                #a33c3c  /* Crimson Red */\r\n");
      out.write("            );\r\n");
      out.write("            background-size: 600% 600%;\r\n");
      out.write("            animation: gradientAnimation 4s ease infinite;\r\n");
      out.write("            font-family: 'Merienda', cursive;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("        .loading-text {\r\n");
      out.write("    	    font-family: 'Poppins', sans-serif;\r\n");
      out.write("    	    letter-spacing:2px;\r\n");
      out.write("	    }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <!-- Royal Kitchen Animation -->\r\n");
      out.write("    <div class=\"animation-container\" id=\"text-container\">\r\n");
      out.write("        <h1 class=\"animation-text\">\r\n");
      out.write("            <span>Royal Kitchen</span>\r\n");
      out.write("        </h1>\r\n");
      out.write("        <p class=\"sub-text\">Good food choices are good investments</p>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- Pancake Animation -->\r\n");
      out.write("    <div class=\"loader\" id=\"loader\">\r\n");
      out.write("        <div class=\"tall-stack\">\r\n");
      out.write("            <div class=\"butter falling-element\"></div>\r\n");
      out.write("            <div class=\"pancake falling-element\"></div>\r\n");
      out.write("            <div class=\"pancake falling-element\"></div>\r\n");
      out.write("            <div class=\"pancake falling-element\"></div>\r\n");
      out.write("            <div class=\"pancake falling-element\"></div>\r\n");
      out.write("            <div class=\"pancake falling-element\"></div>\r\n");
      out.write("            <div class=\"pancake falling-element\"></div>\r\n");
      out.write("            <div class=\"plate\">\r\n");
      out.write("                <div class=\"plate-bottom\"></div>\r\n");
      out.write("                <div class=\"shadow\"></div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- Loading Text -->\r\n");
      out.write("    <div class=\"loading-text\" id=\"loadingText\">Loading...</div>\r\n");
      out.write("\r\n");
      out.write("   <!-- Hidden Form for Redirect -->\r\n");
      out.write("<form id=\"redirectForm\" action=\"searchRestaurants\" method=\"POST\" style=\"display: none;\"></form>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    window.onload = function() {\r\n");
      out.write("        // Step 1: Show Royal Kitchen text for 4 seconds\r\n");
      out.write("        setTimeout(function() {\r\n");
      out.write("            document.querySelector('.animation-container').style.display = 'none'; // Hide Royal Kitchen text\r\n");
      out.write("            document.querySelector('#loader').style.display = 'block'; // Show pancake loader\r\n");
      out.write("\r\n");
      out.write("            // Step 2: Run pancake animation once (4.5 seconds)\r\n");
      out.write("            setTimeout(function() {\r\n");
      out.write("                document.querySelector('#loader').style.display = 'none'; // Hide loader after it runs\r\n");
      out.write("                document.querySelector('#loadingText').style.display = 'block'; // Show Loading... text\r\n");
      out.write("\r\n");
      out.write("                // Step 3: Submit the form once the next page is ready\r\n");
      out.write("                document.getElementById(\"redirectForm\").submit(); \r\n");
      out.write("            }, 5000); // Pancake loader duration (matches the animation)\r\n");
      out.write("        }, 4000); // Time before starting the pancake loader\r\n");
      out.write("    };\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
